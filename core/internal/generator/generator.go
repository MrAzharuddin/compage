package generator

import (
	"context"
	"errors"
	"github.com/kube-tarian/compage/core/internal/core"
	"github.com/kube-tarian/compage/core/internal/languages"
	"github.com/kube-tarian/compage/core/internal/languages/golang"
	"github.com/kube-tarian/compage/core/internal/utils"
	log "github.com/sirupsen/logrus"
)

// Generator called from rest as well as gRPC
func Generator(coreProject *core.Project) error {
	// create a directory with project name to contain code generated by core.
	projectDirectory := utils.GetProjectDirectoryName(coreProject.Name)
	if err := utils.CreateDirectories(projectDirectory); err != nil {
		return err
	}

	// Iterate over all nodes and generate code for all nodes.
	compageJson := coreProject.CompageJson
	for _, compageNode := range compageJson.Nodes {
		log.Debugf("processing node ID : %s ", compageNode.ID)
		// convert node to languageNode
		languageNode, err1 := languages.NewLanguageNode(compageJson, compageNode)
		if err1 != nil {
			// return errors like certain protocols aren't yet supported
			return err1
		}

		// if language is not set, consider that the node is go project
		if compageNode.ConsumerData.Language == "" || compageNode.ConsumerData.Language == languages.Go {
			goNode := golang.GoNode{LanguageNode: *languageNode}
			// currently below func does nothing.
			if err2 := goNode.FillDefaults(); err2 != nil {
				return err2
			}

			ctx := golang.AddValuesToContext(context.Background(), coreProject, &goNode)

			if err2 := golang.Generator(ctx); err2 != nil {
				return err2
			}
			// trigger template runner
			// create data map with values from GoNode and project to replace placeholders  - this is required as the
			// names may be conflicting in nature
			// TODO
		} else if compageNode.ConsumerData.Language == languages.NodeJs {
			return errors.New("unsupported language : " + languages.NodeJs)
		} else {
			return errors.New("unsupported language : " + compageNode.ConsumerData.Language)
		}
	}

	return nil
}
