// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/v1/project.proto

package project

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProjectServiceClient is the client API for ProjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectServiceClient interface {
	GenerateProject(ctx context.Context, in *GenerateProjectRequest, opts ...grpc.CallOption) (ProjectService_GenerateProjectClient, error)
	RegenerateProject(ctx context.Context, in *GenerateProjectRequest, opts ...grpc.CallOption) (ProjectService_RegenerateProjectClient, error)
}

type projectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectServiceClient(cc grpc.ClientConnInterface) ProjectServiceClient {
	return &projectServiceClient{cc}
}

func (c *projectServiceClient) GenerateProject(ctx context.Context, in *GenerateProjectRequest, opts ...grpc.CallOption) (ProjectService_GenerateProjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProjectService_ServiceDesc.Streams[0], "/api.v1.ProjectService/GenerateProject", opts...)
	if err != nil {
		return nil, err
	}
	x := &projectServiceGenerateProjectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProjectService_GenerateProjectClient interface {
	Recv() (*GenerateProjectResponse, error)
	grpc.ClientStream
}

type projectServiceGenerateProjectClient struct {
	grpc.ClientStream
}

func (x *projectServiceGenerateProjectClient) Recv() (*GenerateProjectResponse, error) {
	m := new(GenerateProjectResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *projectServiceClient) RegenerateProject(ctx context.Context, in *GenerateProjectRequest, opts ...grpc.CallOption) (ProjectService_RegenerateProjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProjectService_ServiceDesc.Streams[1], "/api.v1.ProjectService/RegenerateProject", opts...)
	if err != nil {
		return nil, err
	}
	x := &projectServiceRegenerateProjectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProjectService_RegenerateProjectClient interface {
	Recv() (*GenerateProjectResponse, error)
	grpc.ClientStream
}

type projectServiceRegenerateProjectClient struct {
	grpc.ClientStream
}

func (x *projectServiceRegenerateProjectClient) Recv() (*GenerateProjectResponse, error) {
	m := new(GenerateProjectResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProjectServiceServer is the server API for ProjectService service.
// All implementations should embed UnimplementedProjectServiceServer
// for forward compatibility
type ProjectServiceServer interface {
	GenerateProject(*GenerateProjectRequest, ProjectService_GenerateProjectServer) error
	RegenerateProject(*GenerateProjectRequest, ProjectService_RegenerateProjectServer) error
}

// UnimplementedProjectServiceServer should be embedded to have forward compatible implementations.
type UnimplementedProjectServiceServer struct {
}

func (UnimplementedProjectServiceServer) GenerateProject(*GenerateProjectRequest, ProjectService_GenerateProjectServer) error {
	return status.Errorf(codes.Unimplemented, "method GenerateProject not implemented")
}
func (UnimplementedProjectServiceServer) RegenerateProject(*GenerateProjectRequest, ProjectService_RegenerateProjectServer) error {
	return status.Errorf(codes.Unimplemented, "method RegenerateProject not implemented")
}

// UnsafeProjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectServiceServer will
// result in compilation errors.
type UnsafeProjectServiceServer interface {
	mustEmbedUnimplementedProjectServiceServer()
}

func RegisterProjectServiceServer(s grpc.ServiceRegistrar, srv ProjectServiceServer) {
	s.RegisterService(&ProjectService_ServiceDesc, srv)
}

func _ProjectService_GenerateProject_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GenerateProjectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProjectServiceServer).GenerateProject(m, &projectServiceGenerateProjectServer{stream})
}

type ProjectService_GenerateProjectServer interface {
	Send(*GenerateProjectResponse) error
	grpc.ServerStream
}

type projectServiceGenerateProjectServer struct {
	grpc.ServerStream
}

func (x *projectServiceGenerateProjectServer) Send(m *GenerateProjectResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ProjectService_RegenerateProject_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GenerateProjectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProjectServiceServer).RegenerateProject(m, &projectServiceRegenerateProjectServer{stream})
}

type ProjectService_RegenerateProjectServer interface {
	Send(*GenerateProjectResponse) error
	grpc.ServerStream
}

type projectServiceRegenerateProjectServer struct {
	grpc.ServerStream
}

func (x *projectServiceRegenerateProjectServer) Send(m *GenerateProjectResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ProjectService_ServiceDesc is the grpc.ServiceDesc for ProjectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.ProjectService",
	HandlerType: (*ProjectServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GenerateProject",
			Handler:       _ProjectService_GenerateProject_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RegenerateProject",
			Handler:       _ProjectService_RegenerateProject_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/project.proto",
}
