package generator

import (
	"errors"
	"fmt"
	"github.com/kube-tarian/compage-core/internal/core"
	"github.com/kube-tarian/compage-core/internal/languages"
	"github.com/kube-tarian/compage-core/internal/languages/golang"
	"github.com/kube-tarian/compage-core/internal/utils"
	log "github.com/sirupsen/logrus"
)

// Generator called from rest as well as gRPC
func Generator(coreProject *core.Project) error {
	// create a directory with project name to contain code generated by compage-core.
	projectDirectory := utils.GetProjectDirectoryName(coreProject.Name)
	if err := utils.CreateDirectories(projectDirectory); err != nil {
		return err
	}

	// Iterate over all nodes and generate code for all nodes.
	compageYaml := coreProject.CompageYaml
	for _, node := range compageYaml.Nodes {
		log.Info("processing node ID : ", node.ID)

		// if language is not set, consider that the node is go project
		if node.ConsumerData.Language == "" || node.ConsumerData.Language == languages.Go {
			// This will be used to create clients to other servers. This is required for custom template plus the
			// cli/frameworks plan for next release
			otherServersInfo, err := languages.GetOtherServersInfo(coreProject.CompageYaml.Edges, node)
			if err != nil {
				return err
			}

			fmt.Println(otherServersInfo)
			goNode, err := golang.NewNode(node)
			if err != nil {
				// return errors like certain protocols aren't yet supported
				return err
			}
			if err := golang.Generator(coreProject.Name, goNode); err != nil {
				return err
			}
			// trigger template runner
			// TODO
		} else if node.ConsumerData.Language == languages.NodeJs {
			return errors.New("unsupported language : " + languages.NodeJs)
		} else {
			return errors.New("unsupported language : " + node.ConsumerData.Language)
		}
	}

	return nil
}
