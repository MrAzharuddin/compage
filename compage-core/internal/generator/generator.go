package generator

import (
	"errors"
	"github.com/kube-tarian/compage-core/internal/core"
	"github.com/kube-tarian/compage-core/internal/languages"
	"github.com/kube-tarian/compage-core/internal/languages/golang"
	"github.com/kube-tarian/compage-core/internal/utils"
	log "github.com/sirupsen/logrus"
)

// Generator called from rest as well as gRPC
func Generator(coreProject *core.Project) error {
	// create a directory with project name to contain code generated by compage-core.
	projectDirectory := utils.GetProjectDirectoryName(coreProject.Name)
	err := utils.CreateDirectories(projectDirectory)
	if err != nil {
		return err
	}
	// decide how many components need to be created here
	compageYaml := coreProject.CompageYaml
	for _, nodeP := range compageYaml.Nodes {
		log.Info("processing nodeP : ", nodeP.ID)
		// retrieve connection details for this nodeP from edges
		// if language is not set, consider that the node is go project
		if nodeP.ConsumerData.Language == "" || nodeP.ConsumerData.Language == languages.Go {
			if err = golang.GoGenerator(coreProject, golang.GetGoNode(nodeP)); err != nil {
				return err
			}
		} else if nodeP.ConsumerData.Language == languages.NodeJs {
			return errors.New("unsupported language : " + languages.NodeJs)
		} else {
			return errors.New("unsupported language : " + nodeP.ConsumerData.Language)
		}
	}

	return nil
}
