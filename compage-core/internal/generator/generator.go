package generator

import (
	"errors"
	"github.com/kube-tarian/compage-core/internal/core"
	"github.com/kube-tarian/compage-core/internal/core/edge"
	"github.com/kube-tarian/compage-core/internal/core/node"
	"github.com/kube-tarian/compage-core/internal/languages"
	"github.com/kube-tarian/compage-core/internal/languages/golang"
	"github.com/kube-tarian/compage-core/internal/utils"
	log "github.com/sirupsen/logrus"
)

// Generate triggers the code generation.
func Generate(coreProject *core.Project) error {
	// create a directory with project name to contain code generated by compage-core.
	projectDirectory := utils.GetProjectDirectoryName(coreProject.Name)
	err := utils.CreateDirectories(projectDirectory)
	if err != nil {
		return err
	}
	// decide how many components need to be created here
	compageYaml := coreProject.CompageYaml
	for _, nodeP := range compageYaml.Nodes {
		log.Info("processing nodeP : ", nodeP.ID)
		// retrieve connection details for this nodeP from edges
		if nodeP.ConsumerData.Language == languages.Go {
			if golang.Compage == nodeP.ConsumerData.Template {
				err = GoTemplateRunner(coreProject, golang.GetGoNode(nodeP))
				if err != nil {
					return err
				}
			} else {
				// frameworks cli tools
				return errors.New("unsupported template for language : " + languages.Go)
			}
		} else if nodeP.ConsumerData.Language == languages.NodeJs {
			return errors.New("unsupported language : " + languages.NodeJs)
		} else {
			return errors.New("unsupported language : " + nodeP.ConsumerData.Language)
		}
	}

	return nil
}

func getEdgeInfoForNode(edges []edge.Edge, node node.Node) map[string]string {
	m := map[string]string{}
	//for _, e := range edges {
	//	if e.Src == node.ID {
	//		m["SERVER_PROTOCOL"] = e.ConsumerData.Protocol
	//		m["SRC"] = e.Src
	//	} else if e.Dest == node.ID {
	//		m["CLIENT_PROTOCOL"] = e.ConsumerData.Protocol
	//		m["DEST"] = e.Dest
	//	}
	//	m["NAME"] = node.ConsumerData.Name
	//}
	return m
}
